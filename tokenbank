// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenBank is Ownable {
    // 存储每个地址的存款余额
    mapping(address => uint256) private _balances;
    
    // 代币合约地址
    IERC20 private _token;
    
    // 存款事件
    event Deposit(address indexed user, uint256 amount);
    
    // 取款事件
    event Withdraw(address indexed user, uint256 amount);
    
    // 构造函数，传入代币合约地址
    constructor(address tokenAddress) {
        _token = IERC20(tokenAddress);
    }
    
    // 存款函数
    function deposit(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        
        // 将代币从用户转移到银行合约
        require(
            _token.transferFrom(msg.sender, address(this), amount),
            "Transfer failed"
        );
        
        // 更新用户余额
        _balances[msg.sender] += amount;
        
        emit Deposit(msg.sender, amount);
    }
    
    // 取款函数
    function withdraw(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(_balances[msg.sender] >= amount, "Insufficient balance");
        
        // 更新用户余额
        _balances[msg.sender] -= amount;
        
        // 将代币从银行合约转移回用户
        require(
            _token.transfer(msg.sender, amount),
            "Transfer failed"
        );
        
        emit Withdraw(msg.sender, amount);
    }
    
    // 查询用户余额
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }
    
    // 查询代币合约地址
    function token() external view returns (address) {
        return address(_token);
    }
    
    // 仅所有者可以提取合约中的代币（紧急情况下使用）
    function emergencyWithdrawToken(address to, uint256 amount) external onlyOwner {
        require(_token.transfer(to, amount), "Transfer failed");
    }
}
